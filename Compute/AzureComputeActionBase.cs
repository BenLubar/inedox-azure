using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Inedo.BuildMaster;
using Inedo.BuildMaster.Extensibility.Actions;
using Inedo.BuildMaster.Web;

namespace Inedo.BuildMasterExtensions.Azure
{
    public abstract class AzureComputeActionBase : AzureAction
    {
        public enum DeploymentSlotType { Staging, Production };
        
        protected static string BlobContainer = "buildmaster-deployments-autogenerated";

        private string deploymentName;

        [Persistent]
        public string ServiceName { get; set; }

        [Persistent]
        public bool WaitForCompletion { get; set; }

        [Persistent]
        public string VariableToSet { get; set; }

        [Persistent]
        public string DeploymentName 
        {
            get { return this.deploymentName != null ? this.deploymentName.Replace(".", "-") : null; }
            set { this.deploymentName = value; } 
        }

        [Persistent]
        public string SlotName { get; set; }

        [Persistent]
        public bool TreatWarningsAsError { get; set; }

        [Persistent]
        public string ExtendedProperties { get; set; }

        [Persistent]
        public string ExtensionConfiguration { get; set; }

        public bool UsesServiceName { get; set; }

        public bool UsesWaitForCompletion { get; set; }

        public bool UsesVariableToSet { get; set; }

        public bool UsesDeploymentName { get; set; }

        public bool UsesSlotName { get; set; }

        public bool UsesTreatWarningsAsError { get; set; }

        public bool UsesExtendedProperties { get; set; }

        public bool UsesExtensionConfiguration { get; set; }

        protected string ParseExtendedProperties()
        {
            if(string.IsNullOrEmpty(this.ExtendedProperties))
                return string.Empty;
            var props = this.ExtendedProperties.ParseNameValue();
            if(props.Count <= 0)
                return string.Empty;
            StringBuilder sb = new StringBuilder();
            sb.Append("<ExtendedProperties>\r\n");
            foreach(var p in props)
                sb.AppendFormat("<ExtendedProperty>\r\n<Name>{0}</Name>\r\n<Value>{1}</Value></ExtendedProperty>\r\n", p.Key, p.Value);
            sb.Append("</ExtendedProperties>\r\n");
            return sb.ToString();
        }
    }
}
